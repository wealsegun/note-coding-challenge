/**
Module Dependencies
**/

const app = require("../server"),
  debug = require("debug")("note-coding-challenge:server"),
  http = require("http");

/**
Normalize a port into a number, string or false
**/

const normalizePort = (val) => {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
};
/**
 * Event listener for HTTP server "error" event.
 */
const onError = (error) => {
  if (error.syscall != "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "pipe" + port : "Port" + port;
  switch (error.code) {
    case "EACCESS":
      console.log(bind + "requires elevated privileges");
      process.exit(1);
      break;

    case "EADDRINUSE":
      console.log(bind + "is already in use");
      process.exit(1);
      break;

    default:
      throw error;
  }
};

/**
 * Event listener for HTTP serve "listening" event.
 */
const serve = process.env.FRONTEND_URI;
const onListening = () => {
  const address = server.address();
  const bind = typeof port === "string" ? "pipe" + address : "Port" + port;
  debug("Listening on" + bind);
};

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Create HTTP server.
 */
const server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);